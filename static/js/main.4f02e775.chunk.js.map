{"version":3,"sources":["reducers/weather.js","actions/types.js","reducers/index.js","mainRoute.js","components/Navigation.jsx","actions/weather.js","components/SearchField.jsx","components/WeatherSmallView.jsx","components/WeatherFullView.jsx","components/pages/Home.jsx","components/pages/Favorites.jsx","App.js","index.js"],"names":["initialState","currentLocation","Version","Key","Type","Rank","LocalizedName","Country","ID","AdministrativeArea","locationsAutocomplete","fiveDaysForecast","currentConditions","favoriteLocations","JSON","parse","localStorage","getItem","favoriteLocationsWithWeather","loading","stateFactory","state","action","payload","onActionBegin","onActionFailure","forecast","DailyForecasts","multipleConditions","map","item","index","newFavoriteLocations","push","location","setItem","stringify","toast","success","filter","key","newFavoriteLocationsWithWeather","error","combineReducers","weather","type","Navigation","path","this","props","history","Nav","variant","activeKey","pathname","onSelect","selectedKey","navigate","className","Item","Link","eventKey","mainRoute","Component","withRouter","setCurrentLocation","getAutocompleteSearchBegin","getAutocompleteSearchSuccess","getAutocompleteSearchFailure","getFiveDaysForecastBegin","getFiveDaysForecastSuccess","getFiveDaysForecastFailure","getCurrentConditionsBegin","getCurrentConditionsSuccess","conditions","getCurrentConditionsFailure","getMultipleCurrentConditionsBegin","getMultipleCurrentConditionsSuccess","getMultipleCurrentConditionsFailure","removeFromFavorites","apiPath","apiKey","proxyurl","handleErrors","response","ok","Error","statusText","onSetCurrentLocation","dispatch","getFiveDaysForecast","locationKey","getState","fetch","method","headers","mode","then","res","json","catch","SearchField","searchField","React","createRef","dropdownIsShown","searchValue","event","setState","target","value","e","preventDefault","onShowDropdown","getAutocompleteSearch","showDropdown","hideDropdown","Form","onKeyPress","handleKeyPress","Group","controlId","Control","placeholder","onChange","handleChange","Dropdown","Menu","show","onClick","onSelectItem","mapDispatchToProps","query","connect","WeatherSmallView","weatherItem","Date","data","toLocaleDateString","weekday","title","dayName","getDayName","degrees","temperatureRange","degreesMin","Temperature","Minimum","Value","Unit","degreesMax","Maximum","Imperial","weatherPhrase","singleCity","WeatherText","Day","IconPhrase","Card","Body","Title","href","navigateFromFavorites","Text","Button","WeatherFullView","isLocationInFavorites","addToFavorites","some","prevProps","todaysForecast","Media","onRemoveFromFavorites","onAddToFavorites","days","Home","Favorites","getMultipleCurrentConditions","Col","Container","Row","length","Promise","all","configure","hideProgressBar","closeOnClick","pauseOnHover","draggable","App","fluid","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f02e775.chunk.js","sourcesContent":["import {\r\n  SET_CURRENT_LOCATION,\r\n  GET_AUTOCOMPLETE_SEARCH_BEGIN,\r\n  GET_AUTOCOMPLETE_SEARCH_SUCCESS,\r\n  GET_AUTOCOMPLETE_SEARCH_FAILURE,\r\n  GET_FIVE_DAYS_FORECAST_BEGIN,\r\n  GET_FIVE_DAYS_FORECAST_SUCCESS,\r\n  GET_FIVE_DAYS_FORECAST_FAILURE,\r\n  GET_CURRENT_CONDITIONS_BEGIN,\r\n  GET_CURRENT_CONDITIONS_SUCCESS,\r\n  GET_CURRENT_CONDITIONS_FAILURE,\r\n  GET_MULTIPLE_CURRENT_CONDITIONS_BEGIN,\r\n  GET_MULTIPLE_CURRENT_CONDITIONS_SUCCESS,\r\n  GET_MULTIPLE_CURRENT_CONDITIONS_FAILURE,\r\n  ADD_TO_FAVORITES,\r\n  REMOVE_FROM_FAVORITES\r\n} from '../actions/types';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\nconst initialState = {\r\n  currentLocation: {\r\n    Version: 1,\r\n    Key: '215854',\r\n    Type: 'City',\r\n    Rank: 31,\r\n    LocalizedName: 'Tel Aviv',\r\n    Country: {\r\n      ID: 'IL',\r\n      LocalizedName: 'Israel'\r\n    },\r\n    AdministrativeArea: {\r\n      ID: 'TA',\r\n      LocalizedName: 'Tel Aviv'\r\n    }\r\n  },\r\n  locationsAutocomplete: [],\r\n  fiveDaysForecast: [],\r\n  currentConditions: [],\r\n  favoriteLocations: JSON.parse(localStorage.getItem('favoriteLocations')) || [],\r\n  favoriteLocationsWithWeather: [],\r\n  loading: false\r\n};\r\n\r\nconst stateFactory = {\r\n  [SET_CURRENT_LOCATION]: onSetCurrentLocation,\r\n  [GET_AUTOCOMPLETE_SEARCH_BEGIN]: onActionBegin,\r\n  [GET_AUTOCOMPLETE_SEARCH_SUCCESS]: onGetAutocompleteSearchSuccess,\r\n  [GET_AUTOCOMPLETE_SEARCH_FAILURE]: onActionFailure,\r\n  [GET_FIVE_DAYS_FORECAST_BEGIN]: onActionBegin,\r\n  [GET_FIVE_DAYS_FORECAST_SUCCESS]: onGetFiveDaysForecastSuccess,\r\n  [GET_FIVE_DAYS_FORECAST_FAILURE]: onActionFailure,\r\n  [GET_CURRENT_CONDITIONS_BEGIN]: onActionBegin,\r\n  [GET_CURRENT_CONDITIONS_SUCCESS]: onGetCurrentConditionsSuccess,\r\n  [GET_CURRENT_CONDITIONS_FAILURE]: onActionFailure,\r\n  [GET_MULTIPLE_CURRENT_CONDITIONS_BEGIN]: onActionBegin,\r\n  [GET_MULTIPLE_CURRENT_CONDITIONS_SUCCESS]: onGetMultipleCurrentConditionsSuccess,\r\n  [GET_MULTIPLE_CURRENT_CONDITIONS_FAILURE]: onActionFailure,\r\n  [ADD_TO_FAVORITES]: onAddToFavorites,\r\n  [REMOVE_FROM_FAVORITES]: onRemoveFromFavorites\r\n};\r\n\r\nfunction onActionBegin(state, action) {\r\n  return {\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  };\r\n}\r\n\r\nfunction onActionFailure(state, action) {\r\n  toast.error('An error occured while loading data');\r\n\r\n  return {\r\n    ...state,\r\n    loading: false,\r\n    error: action.payload.error\r\n  };\r\n}\r\n\r\nfunction onSetCurrentLocation(state, action) {\r\n  return {\r\n    ...state,\r\n    currentLocation: action.payload.currentLocation\r\n  };\r\n}\r\n\r\nfunction onGetAutocompleteSearchSuccess(state, action) {\r\n  return {\r\n    ...state,\r\n    loading: false,\r\n    locationsAutocomplete: action.payload.locationsAutocomplete\r\n  };\r\n}\r\n\r\nfunction onGetFiveDaysForecastSuccess(state, action) {\r\n  return {\r\n    ...state,\r\n    loading: false,\r\n    fiveDaysForecast: action.payload.forecast.DailyForecasts\r\n  };\r\n}\r\n\r\nfunction onGetCurrentConditionsSuccess(state, action) {\r\n  return {\r\n    ...state,\r\n    loading: false\r\n  };\r\n}\r\n\r\nfunction onGetMultipleCurrentConditionsSuccess(state, action) {\r\n  const multipleConditions = action.payload.multipleConditions;\r\n  const favoriteLocationsWithWeather = state.favoriteLocations.map((item, index) => ({ ...item, ...multipleConditions[index][0] }));\r\n\r\n  return {\r\n    ...state,\r\n    loading: false,\r\n    favoriteLocationsWithWeather\r\n  }\r\n}\r\n\r\nfunction onAddToFavorites(state, action) {\r\n  const newFavoriteLocations = state.favoriteLocations;\r\n  newFavoriteLocations.push(action.payload.location);\r\n  localStorage.setItem('favoriteLocations', JSON.stringify(newFavoriteLocations));\r\n\r\n  toast.success('Successfully added to favorites');\r\n\r\n  return {\r\n    ...state,\r\n    favoriteLocations: newFavoriteLocations\r\n  };\r\n}\r\n\r\nfunction onRemoveFromFavorites(state, action) {\r\n  const newFavoriteLocations = state.favoriteLocations.filter(location => location.Key !== action.payload.key);\r\n  const newFavoriteLocationsWithWeather = state.favoriteLocationsWithWeather.filter(location => location.Key !== action.payload.key);\r\n\r\n  toast.success('Successfully removed from favorites');\r\n\r\n  return {\r\n    ...state,\r\n    favoriteLocations: newFavoriteLocations,\r\n    favoriteLocationsWithWeather: newFavoriteLocationsWithWeather\r\n  };\r\n}\r\n\r\nexport default function events(state = initialState, action) {\r\n  if (stateFactory[action.type]) {\r\n    return stateFactory[action.type](state, action);\r\n  }\r\n\r\n  return state;\r\n}\r\n","export const SET_CURRENT_LOCATION = 'SET_CURRENT_LOCATION';\r\n\r\nexport const GET_AUTOCOMPLETE_SEARCH_BEGIN = 'GET_AUTOCOMPLETE_SEARCH_BEGIN';\r\nexport const GET_AUTOCOMPLETE_SEARCH_SUCCESS = 'GET_AUTOCOMPLETE_SEARCH_SUCCESS';\r\nexport const GET_AUTOCOMPLETE_SEARCH_FAILURE = 'GET_AUTOCOMPLETE_SEARCH_FAILURE';\r\n\r\nexport const GET_FIVE_DAYS_FORECAST_BEGIN = 'GET_FIVE_DAYS_FORECAST_BEGIN';\r\nexport const GET_FIVE_DAYS_FORECAST_SUCCESS = 'GET_FIVE_DAYS_FORECAST_SUCCESS';\r\nexport const GET_FIVE_DAYS_FORECAST_FAILURE = 'GET_FIVE_DAYS_FORECAST_FAILURE';\r\n\r\nexport const GET_CURRENT_CONDITIONS_BEGIN = 'GET_CURRENT_CONDITIONS_BEGIN';\r\nexport const GET_CURRENT_CONDITIONS_SUCCESS = 'GET_CURRENT_CONDITIONS_SUCCESS';\r\nexport const GET_CURRENT_CONDITIONS_FAILURE = 'GET_CURRENT_CONDITIONS_FAILURE';\r\n\r\nexport const GET_MULTIPLE_CURRENT_CONDITIONS_BEGIN = 'GET_MULTIPLE_CURRENT_CONDITIONS_BEGIN';\r\nexport const GET_MULTIPLE_CURRENT_CONDITIONS_SUCCESS = 'GET_MULTIPLE_CURRENT_CONDITIONS_SUCCESS';\r\nexport const GET_MULTIPLE_CURRENT_CONDITIONS_FAILURE = 'GET_MULTIPLE_CURRENT_CONDITIONS_FAILURE';\r\n\r\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES';\r\nexport const REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES';","import { combineReducers } from 'redux';\r\nimport weather from './weather';\r\n\r\nexport default combineReducers({\r\n  weather\r\n});\r\n","export default '/oksana-mazun-22-10-2019';","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { Nav } from 'react-bootstrap';\r\nimport mainRoute from '../mainRoute';\r\nimport '../css/Navigation.css';\r\n\r\nclass Navigation extends Component {\r\n  navigate(path) {\r\n    this.props.history.push(path);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Nav\r\n        variant=\"pills\"\r\n        activeKey={this.props.history.location.pathname}\r\n        onSelect={selectedKey => this.navigate(selectedKey)}\r\n        className=\"navigation\">\r\n        <h1>Herolo Weather Task</h1>\r\n\r\n        <div className=\"links\">\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={mainRoute}>Home</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={`${mainRoute}/favorites`}>Favorites</Nav.Link>\r\n          </Nav.Item>\r\n        </div>\r\n      </Nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Navigation);","import {\r\n  SET_CURRENT_LOCATION,\r\n  GET_AUTOCOMPLETE_SEARCH_BEGIN,\r\n  GET_AUTOCOMPLETE_SEARCH_SUCCESS,\r\n  GET_AUTOCOMPLETE_SEARCH_FAILURE,\r\n  GET_FIVE_DAYS_FORECAST_BEGIN,\r\n  GET_FIVE_DAYS_FORECAST_SUCCESS,\r\n  GET_FIVE_DAYS_FORECAST_FAILURE,\r\n  GET_CURRENT_CONDITIONS_BEGIN,\r\n  GET_CURRENT_CONDITIONS_SUCCESS,\r\n  GET_CURRENT_CONDITIONS_FAILURE,\r\n  GET_MULTIPLE_CURRENT_CONDITIONS_BEGIN,\r\n  GET_MULTIPLE_CURRENT_CONDITIONS_SUCCESS,\r\n  GET_MULTIPLE_CURRENT_CONDITIONS_FAILURE,\r\n  ADD_TO_FAVORITES,\r\n  REMOVE_FROM_FAVORITES\r\n} from '../actions/types';\r\n\r\nexport const setCurrentLocation = (currentLocation) => ({\r\n  type: SET_CURRENT_LOCATION,\r\n  payload: { currentLocation }\r\n});\r\n\r\nexport const getAutocompleteSearchBegin = () => ({\r\n  type: GET_AUTOCOMPLETE_SEARCH_BEGIN\r\n});\r\n\r\nexport const getAutocompleteSearchSuccess = locationsAutocomplete => ({\r\n  type: GET_AUTOCOMPLETE_SEARCH_SUCCESS,\r\n  payload: { locationsAutocomplete }\r\n});\r\n\r\nexport const getAutocompleteSearchFailure = error => ({\r\n  type: GET_AUTOCOMPLETE_SEARCH_FAILURE,\r\n  payload: { error }\r\n});\r\n\r\nexport const getFiveDaysForecastBegin = () => ({\r\n  type: GET_FIVE_DAYS_FORECAST_BEGIN\r\n});\r\n\r\nexport const getFiveDaysForecastSuccess = forecast => ({\r\n  type: GET_FIVE_DAYS_FORECAST_SUCCESS,\r\n  payload: { forecast }\r\n});\r\n\r\nexport const getFiveDaysForecastFailure = error => ({\r\n  type: GET_FIVE_DAYS_FORECAST_FAILURE,\r\n  payload: { error }\r\n});\r\n\r\nexport const getCurrentConditionsBegin = () => ({\r\n  type: GET_CURRENT_CONDITIONS_BEGIN\r\n});\r\n\r\nexport const getCurrentConditionsSuccess = (conditions) => ({\r\n  type: GET_CURRENT_CONDITIONS_SUCCESS,\r\n  payload: { conditions }\r\n});\r\n\r\nexport const getCurrentConditionsFailure = error => ({\r\n  type: GET_CURRENT_CONDITIONS_FAILURE,\r\n  payload: { error }\r\n});\r\n\r\nexport const getMultipleCurrentConditionsBegin = () => ({\r\n  type: GET_MULTIPLE_CURRENT_CONDITIONS_BEGIN\r\n});\r\n\r\nexport const getMultipleCurrentConditionsSuccess = (multipleConditions) => ({\r\n  type: GET_MULTIPLE_CURRENT_CONDITIONS_SUCCESS,\r\n  payload: { multipleConditions }\r\n});\r\n\r\nexport const getMultipleCurrentConditionsFailure = error => ({\r\n  type: GET_MULTIPLE_CURRENT_CONDITIONS_FAILURE,\r\n  payload: { error }\r\n});\r\n\r\nexport const addToFavorites = (location) => ({\r\n  type: ADD_TO_FAVORITES,\r\n  payload: { location }\r\n});\r\n\r\nexport const removeFromFavorites = (key) => ({\r\n  type: REMOVE_FROM_FAVORITES,\r\n  payload: { key }\r\n});\r\n\r\nconst apiPath = 'http://dataservice.accuweather.com/';\r\nconst apiKey = 'mqgMiRJ1743Xx3k3yw2wFED4a84gFSYh';\r\nconst proxyurl = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\nexport function onSetCurrentLocation(location) {\r\n  return dispatch => {\r\n    dispatch(setCurrentLocation(location));\r\n    dispatch(getFiveDaysForecast(location.Key));\r\n  }\r\n}\r\n\r\nexport function getAutocompleteSearch(query) {\r\n  return dispatch => {\r\n    dispatch(getAutocompleteSearchBegin());\r\n\r\n    return fetch(`${proxyurl + apiPath}/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${query}&language=en-us`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\r\n      },\r\n      mode: 'cors'\r\n    })\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        dispatch(getAutocompleteSearchSuccess(json));\r\n        return json;\r\n      })\r\n      .catch(error => dispatch(getAutocompleteSearchFailure(error)));\r\n  }\r\n}\r\n\r\nexport function getFiveDaysForecast(locationKey) {\r\n  return (dispatch, getState) => {\r\n    dispatch(getFiveDaysForecastBegin());\r\n\r\n    return fetch(`${proxyurl + apiPath}/forecasts/v1/daily/5day/${locationKey}?apikey=${apiKey}&language=en-us`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\r\n      },\r\n      mode: 'cors'\r\n    })\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        dispatch(getFiveDaysForecastSuccess(json));\r\n        return json;\r\n      })\r\n      .catch(error => dispatch(getFiveDaysForecastFailure(error)));\r\n  };\r\n}\r\n\r\nexport function getCurrentConditions(locationKey) {\r\n  return (dispatch, getState) => {\r\n    dispatch(getCurrentConditionsBegin());\r\n\r\n    return fetch(`${proxyurl + apiPath}/currentconditions/v1/${locationKey}?apikey=${apiKey}&language=en-us`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\r\n      },\r\n      mode: 'cors'\r\n    })\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        dispatch(getCurrentConditionsSuccess(json));\r\n        return json;\r\n      })\r\n      .catch(error => dispatch(getCurrentConditionsFailure(error)));\r\n  };\r\n}\r\n\r\nexport function getMultipleCurrentConditions() {\r\n  return (dispatch, getState) => {\r\n    dispatch(getMultipleCurrentConditionsBegin());\r\n\r\n    return Promise.all(getState().weather.favoriteLocations.map(item => dispatch(getCurrentConditions(item.Key))))\r\n      .then(json => {\r\n        dispatch(getMultipleCurrentConditionsSuccess(json));\r\n        return json;\r\n      })\r\n      .catch(error => {\r\n        dispatch(getMultipleCurrentConditionsFailure(error))\r\n      })\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Dropdown } from 'react-bootstrap';\r\nimport {\r\n  onSetCurrentLocation,\r\n  getAutocompleteSearch\r\n} from '../actions';\r\nimport '../css/SearchField.css';\r\n\r\nclass SearchField extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.searchField = React.createRef(); \r\n\r\n    this.state = {\r\n      dropdownIsShown: false,\r\n      searchValue: ''\r\n    };\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ searchValue: event.target.value });\r\n  }\r\n\r\n  showDropdown() {\r\n    this.setState({ dropdownIsShown: true });\r\n  }\r\n\r\n  hideDropdown() {\r\n    this.setState({ dropdownIsShown: false });\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      this.onShowDropdown();\r\n    }\r\n  }\r\n\r\n  onShowDropdown() {\r\n    this.props.getAutocompleteSearch(this.state.searchValue);\r\n    this.showDropdown();\r\n  }\r\n\r\n  onSelectItem(location) {\r\n    this.props.onSetCurrentLocation(location);\r\n    this.hideDropdown();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form onKeyPress={e => this.handleKeyPress(e)}>\r\n        <Form.Group controlId=\"search\" className=\"search-field\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter city name\"\r\n            value={this.state.searchValue}\r\n            onChange={(e) => this.handleChange(e)} />\r\n\r\n          <Dropdown.Menu show={this.state.dropdownIsShown}>\r\n            {this.props.locationsAutocomplete.map(location => (\r\n              <Dropdown.Item\r\n                onClick={() => this.onSelectItem(location)}\r\n                key={location.Key}>\r\n                {location.LocalizedName}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Form.Group>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentLocation: state.weather.currentLocation,\r\n  locationsAutocomplete: state.weather.locationsAutocomplete\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onSetCurrentLocation,\r\n  getAutocompleteSearch\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SearchField);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport {\r\n  onSetCurrentLocation,\r\n  removeFromFavorites\r\n} from '../actions';\r\nimport mainRoute from '../mainRoute';\r\nimport { Card, Button } from 'react-bootstrap';\r\n\r\nclass WeatherSmallView extends Component {\r\n  navigateFromFavorites(e, weatherItem) {\r\n    e.preventDefault();\r\n    this.props.onSetCurrentLocation(weatherItem);\r\n    this.props.history.push(mainRoute);\r\n  }\r\n\r\n  getDayName() {\r\n    const date = new Date(this.props.data.Date);\r\n    return date.toLocaleDateString('en-US', { weekday: 'long' });\r\n  }\r\n\r\n  render() {\r\n    let title = '';\r\n\r\n    if (this.props.dayName) {\r\n      title = this.getDayName();\r\n    } else {\r\n      title = this.props.data.LocalizedName;\r\n    }\r\n\r\n    let degrees = '';\r\n    if (this.props.temperatureRange) {\r\n      const degreesMin = `${this.props.data.Temperature.Minimum.Value}°${this.props.data.Temperature.Minimum.Unit}`;\r\n      const degreesMax = `${this.props.data.Temperature.Maximum.Value}°${this.props.data.Temperature.Maximum.Unit}`;\r\n      degrees = `${degreesMin} - ${degreesMax}`;\r\n    } else {\r\n      degrees = `${this.props.data.Temperature.Imperial.Value}°${this.props.data.Temperature.Imperial.Unit}`;\r\n    }\r\n\r\n    let weatherPhrase = '';\r\n    if (this.props.singleCity) {\r\n      weatherPhrase = this.props.data.WeatherText;\r\n    } else {\r\n      weatherPhrase = this.props.data.Day.IconPhrase;\r\n    }\r\n\r\n    return (\r\n      <Card className=\"my-2\">\r\n        <Card.Body>\r\n          {this.props.dayName ?\r\n            <Card.Title>{title}</Card.Title>\r\n            :\r\n            <Card.Link\r\n              href=\"#\"\r\n              onClick={(e) => this.navigateFromFavorites(e, this.props.data)}>\r\n              {title}\r\n            </Card.Link>}\r\n          <Card.Text>{degrees}</Card.Text>\r\n          <Card.Text>{weatherPhrase}</Card.Text>\r\n          {this.props.singleCity &&\r\n          <Button\r\n            variant=\"danger\"\r\n            onClick={() => this.props.removeFromFavorites(this.props.data.Key)}>\r\n            Remove item\r\n          </Button>}\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onSetCurrentLocation,\r\n  removeFromFavorites\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(withRouter(WeatherSmallView));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getFiveDaysForecast,\r\n  addToFavorites,\r\n  removeFromFavorites\r\n} from '../actions';\r\nimport { Card, Media, Button } from 'react-bootstrap';\r\nimport WeatherSmallView from './WeatherSmallView';\r\nimport '../css/WeatherFullView.css';\r\n\r\nclass WeatherFullView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLocationInFavorites: false\r\n    }\r\n  }\r\n\r\n  onAddToFavorites() {\r\n    this.props.addToFavorites(this.props.currentLocation);\r\n    this.setState({ isLocationInFavorites: true });\r\n  }\r\n\r\n  onRemoveFromFavorites() {\r\n    this.props.removeFromFavorites(this.props.currentLocation.Key);\r\n    this.setState({ isLocationInFavorites: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getFiveDaysForecast(this.props.currentLocation.Key);\r\n    this.setState({ isLocationInFavorites: this.props.favoriteLocations.some(item => item.Key === this.props.currentLocation.Key) });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if ((this.props.currentLocation !== prevProps.currentLocation) || (this.props.favoriteLocations !== prevProps.favoriteLocations)) {\r\n      this.setState({ isLocationInFavorites: this.props.favoriteLocations.some(item => item.Key === this.props.currentLocation.Key) });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const todaysForecast = this.props.fiveDaysForecast[0];\r\n    const degreesMin = todaysForecast ? `${todaysForecast.Temperature.Minimum.Value}°${todaysForecast.Temperature.Minimum.Unit}` : '';\r\n    const degreesMax = todaysForecast ? `${todaysForecast.Temperature.Maximum.Value}°${todaysForecast.Temperature.Maximum.Unit}` : '';\r\n\r\n    return (\r\n      <Card className=\"weather-full-view\">\r\n        <div className=\"inner\">\r\n          <Media>\r\n            <Media.Body>\r\n              <h5>{this.props.currentLocation.LocalizedName}</h5>\r\n              <p>\r\n                {degreesMin} - {degreesMax}\r\n              </p>\r\n            </Media.Body>\r\n          </Media>\r\n          {this.state.isLocationInFavorites ?\r\n            <Button onClick={() => this.onRemoveFromFavorites()} variant=\"danger\">Remove from favorites</Button>\r\n          :\r\n            <Button onClick={() => this.onAddToFavorites()}>Add to favorites</Button>}\r\n        </div>\r\n\r\n        <div className=\"inner flex-wrap\">\r\n          {this.props.fiveDaysForecast.map(weatherItem => (\r\n            <WeatherSmallView\r\n              data={weatherItem}\r\n              key={weatherItem.Date}\r\n              dayName\r\n              temperatureRange\r\n              days />\r\n          ))}\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentLocation: state.weather.currentLocation,\r\n  fiveDaysForecast: state.weather.fiveDaysForecast,\r\n  favoriteLocations: state.weather.favoriteLocations\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getFiveDaysForecast,\r\n  addToFavorites,\r\n  removeFromFavorites\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(WeatherFullView);\r\n","import React, { Component } from 'react';\r\nimport SearchField from '../SearchField';\r\nimport WeatherFullView from '../WeatherFullView';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"home\">\r\n        <SearchField />\r\n\r\n        <WeatherFullView />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getMultipleCurrentConditions } from '../../actions';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport WeatherSmallView from '../WeatherSmallView';\r\n\r\nclass Favorites extends Component {\r\n  componentDidMount() {\r\n    this.props.getMultipleCurrentConditions();\r\n  }\r\n\r\n  render() {\r\n    const favoriteLocationsWithWeather = this.props.favoriteLocationsWithWeather.map(weatherItem => (\r\n      <Col key={weatherItem.Key}>\r\n        <WeatherSmallView\r\n          data={weatherItem}\r\n          singleCity />\r\n      </Col>\r\n    ));\r\n\r\n    return (\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          {favoriteLocationsWithWeather}\r\n          {!favoriteLocationsWithWeather.length && <h2>No favorites</h2>}\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  favoriteLocations: state.weather.favoriteLocations,\r\n  favoriteLocationsWithWeather: state.weather.favoriteLocationsWithWeather\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getMultipleCurrentConditions\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Favorites);\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport Navigation from './components/Navigation';\nimport Home from './components/pages/Home';\nimport Favorites from './components/pages/Favorites';\nimport mainRoute from './mainRoute';\nimport './css/App.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure({\n  hideProgressBar: true,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: false\n});\n\nfunction App() {\n  return (\n    <Router>\n      <Container fluid>\n        <Navigation />\n\n        <Switch>\n          <Route path={`${mainRoute}/favorites`}>\n            <Favorites />\n          </Route>\n          <Route path={mainRoute}>\n            <Home />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\nimport './css/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}